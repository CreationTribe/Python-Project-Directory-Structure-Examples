From: https://realpython.com/python-application-layouts/



helloworld/
│
├── bin/
│
├── docs/
│   ├── hello.md
│   └── world.md
│
├── helloworld/
│   ├── __init__.py
│   ├── runner.py
│   ├── hello/
│   │   ├── __init__.py
│   │   ├── hello.py
│   │   └── helpers.py
│   │
│   └── world/
│       ├── __init__.py
│       ├── helpers.py
│       └── world.py
│
├── data/
│   ├── input.csv
│   └── output.xlsx
│
├── tests/
│   ├── hello
│   │   ├── helpers_tests.py
│   │   └── hello_tests.py
│   │
│   └── world/
│       ├── helpers_tests.py
│       └── world_tests.py
│
├── .gitignore
├── LICENSE
└── README.md





bin/: This directory holds any executable files. I’ve adapted this from Jean-Paul Calderone’s classic structure post,
 and his prescriptions for the use of a bin/ directory are still important. The most important point to remember is
 that your executable shouldn’t have a lot of code, just an import and a call to a main function in your runner script.
  If you are using pure Python or don’t have any executable files, you can leave out this directory.

/docs: With a more advanced application, you’ll want to maintain good documentation of all its parts. I like to put
 any documentation for internal modules here, which is why you see separate documents for the hello and world packages.
 If you use docstrings in your internal modules (and you should!), your whole-module documentation should at the very
  least give a holistic view of the purpose and function of the module.

helloworld/: This is similar to helloworld/ in the previous structure, but now there are subdirectories. As you add
more complexity, you’ll want to use a “divide and conquer” tactic and split out parts of your application logic into
 more manageable chunks. Remember that the directory name refers to the overall package name, and so the subdirectory
  names (hello/ and world/) should reflect their package names.

data/: Having this directory is helpful for testing. It’s a central location for any files that your application will
 ingest or produce. Depending on how you deploy your application, you can keep “production-level” inputs and outputs
  pointed to this directory, or only use it for internal testing.

tests/: Here, you can put all your tests—unit tests, execution tests, integration tests, and so on. Feel free to
 structure this directory in the most convenient way for your testing strategies, import strategies, and more. For a
 refresher on testing command-line applications with Python, check out my article 4 Techniques for Testing Python
  Command-Line (CLI) Apps.
